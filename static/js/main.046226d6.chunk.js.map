{"version":3,"sources":["components/compress.jsx","App.js","reportWebVitals.js","index.js"],"names":["ComporessComponent","useState","useImage","setImage","useResizedImage","setResizedImage","useOrinial","setOriginal","useResized","setRisized","useSizeWidth","setSizeWidth","useSizeHeight","setSizeHeight","newSizeWidthText","useRef","newSizeHeightText","originalDimText","resizedDimText","url","a","Axios","get","timeout","responseType","then","res","data","catch","e","console","log","buf","readImageDataFromURLAndConvertedAsDataURL","resizeImageProportionally","bytes","Uint8Array","blob","Blob","buffer","reader","FileReader","onload","target","result","readAsDataURL","originalFile","img","Image","src","maxWidth","maxHeight","width","height","Math","round","calculateSize","newWidth","newHeight","canvas","document","createElement","getContext","drawImage","toBlob","readableBytes","size","toDataURL","i","floor","pow","toFixed","useEffect","getImage","className","ref","alt","htmlFor","type","id","name","placeholder","onClick","current","value","naturalWidth","naturalHeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.046226d6.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Axios from \"axios\";\n\nimport '../App.css';\n\nconst ComporessComponent = () => {\n    const [useImage, setImage] = useState(null);\n    const [useResizedImage, setResizedImage] = useState(null);\n\n    const [useOrinial, setOriginal] = useState(null);\n    const [useResized, setRisized] = useState(null);\n\n    const [useSizeWidth, setSizeWidth] = useState(100);\n    const [useSizeHeight, setSizeHeight] = useState(100);\n\n    const newSizeWidthText = useRef(null);\n    const newSizeHeightText = useRef(null);\n\n    const originalDimText = useRef(null);\n    const resizedDimText = useRef(null);\n\n    const url = ' https://hugoapgarcia.github.io/structure/assets/focus.jpeg';\n\n\n    useEffect(() => {\n        getImage(url);\n    })\n\n\n\n    /**\n     * \n     * @param {*} url \n     * @returns Bool \n     * @description Get image from spacific url return true if reques is a success or otherewise if not.\n     */\n    async function getImage(url) {\n\n        try {\n            //console.log(\"testing: \" + url);\n            await Axios.get(url, {\n                timeout: 1900,\n                responseType: \"arraybuffer\"\n            })\n                .then((res) => {\n                    return res.data;\n                })\n                .catch((e) => console.log('%c[ERROR]: ', url, 'color:red'))\n                .then((buf) => {\n                    readImageDataFromURLAndConvertedAsDataURL(buf);\n                    resizeImageProportionally(buf);\n                })\n\n            console.log(\"%cpass: \" + url, \"color: green\");\n            return true;\n        } catch (_exception) {\n            console.log(\"%cfail: \" + url, \"color: red\");\n            // console.log(exception);\n            return false;\n        }\n    }\n\n    /**\n     * \n     * @param {*} e \n     * @description Set width/height for original & resize image file.\n     */\n    function compressTonewSizeHandler(e) {\n        setSizeWidth(newSizeWidthText.current.value);\n        setSizeHeight(newSizeHeightText.current.value);\n    }\n\n    /**\n     * \n     * @param {*} data arraybuffer\n     * @description Convert image to Blob and set state to be render in html.\n     */\n    function readImageDataFromURLAndConvertedAsDataURL(data) {\n        let bytes = new Uint8Array(data);\n        let blob = new Blob([bytes.buffer]);\n\n        let reader = new FileReader();\n        reader.onload = function (e) {\n            setImage(e.target.result)\n        };\n        //readAsDataURL from blob data.\n        reader.readAsDataURL(blob);\n    }\n\n\n    /**\n     * \n     * @param {*} data arraybuffer\n     * @description Convet image to Blob, calculate compress and resize image base\n     * on width/height of user imput.\n     */\n    function resizeImageProportionally(data) {\n        let bytes = new Uint8Array(data);\n        let blob = new Blob([bytes.buffer]);\n\n        let originalFile = blob;\n\n        let reader = new FileReader();\n        reader.onload = function (e) {\n            const img = new Image();\n            img.src = e.target.result;\n            let [newWidth, newHeight] = calculateSize(img, useSizeWidth, useSizeHeight);\n\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = newWidth;\n            canvas.height = newHeight;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, 0, 0, newWidth, newHeight);\n\n            canvas.toBlob(\n                (blob) => {\n                    // Handle the compressed image. es. upload or save in local state\n                    setOriginal(readableBytes(originalFile?.size));\n                    setRisized(readableBytes(blob?.size));\n                },\n                'image/jpeg',\n                0.7\n            );\n            setResizedImage(canvas.toDataURL());\n        };\n        //readAsDataURL from blob data.\n        reader.readAsDataURL(blob);\n    }\n\n    /**\n     * \n     * @param {*} img \n     * @param {*} maxWidth \n     * @param {*} maxHeight \n     * @returns {*} [width, height]\n     * @description Return calculated size of width, height base on current image data \n     * and the new width, height from input.\n     */\n    function calculateSize(img, maxWidth, maxHeight) {\n        let width = img.width;\n        let height = img.height;\n\n        // calculate the width and height, constraining the proportions\n        if (width > height) {\n            if (width > maxWidth) {\n                height = Math.round((height * maxWidth) / width);\n                width = maxWidth;\n            }\n        } else {\n            if (height > maxHeight) {\n                width = Math.round((width * maxHeight) / height);\n                height = maxHeight;\n            }\n        }\n        return [width, height];\n    }\n\n    /**\n     * \n     * @param {*} bytes \n     * @returns {*} string size\n     * @description Calculate image new size base on modified width, height from input. \n     */\n    function readableBytes(bytes) {\n        const i = Math.floor(Math.log(bytes) / Math.log(1024)),\n            sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\n    }\n\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"box\">\n                    <img ref={originalDimText} src={useImage} alt=\"original\" />\n                    <div className=\"label\">Reg: {useOrinial} </div>\n                    <img ref={resizedDimText} src={useResizedImage} alt=\"resized\" />\n                    <div className=\"label\">Reg: {useResized} </div>\n                </div>\n                <div className=\"box\">\n                    <h5>Compressing & Resizing Image</h5>\n                    <form>\n                        <label htmlFor=\"fname\">width:</label>\n                        <input type=\"text\" id=\"fname\" name=\"width\" ref={newSizeWidthText} placeholder=\"Enter px\" />\n                        <label htmlFor=\"lname\">height:</label>\n                        <input type=\"text\" id=\"lname\" name=\"height\" ref={newSizeHeightText} placeholder=\"Enter px\" />\n                        <br />\n                        <button\n                            type=\"button\" onClick={(e) => compressTonewSizeHandler(e)}>Resize</button>\n                    </form>\n                    <br />\n                    <div className=\"description\">\n                        <p>Images Dimensions:</p>\n                        <label>Original :  {originalDimText.current?.naturalWidth} X {originalDimText.current?.naturalHeight}</label>\n                        <br />\n                        <p>Image compressed & resized base on <span>width</span> x <span>height</span></p>\n                        <label>Compressed/Resized :  {resizedDimText.current?.naturalWidth} X {resizedDimText.current?.naturalHeight}</label>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default ComporessComponent;\n\n","import CompressComponent from './components/compress.jsx';\n\nfunction App() {\n  return (\n    <CompressComponent/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}